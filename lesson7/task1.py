# Урок 7
# Задание 1

'''
Реализовать класс Matrix (матрица).

Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.

Подсказка:
матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

31 22        3 5 32       3 5 8 3
37 43        2 4 6        8 3 7 1
51 86        -1 64 -8

Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__()
для реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.

Подсказка:
сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
складываем с первым элементом первой строки второй матрицы и т.д.
'''

class Matrix:
    def __init__(self, matr1_line, matr2_line):
        self.matr1_line = matr1_line
        self.matr2_line = matr2_line

    def __add__(self):
        matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] # задаю размеры матрицы, без этой строчки ругается на неправильный размер локальной переменной

        for i in range(len(self.matr1_line)):
            for j in range(len(self.matr2_line[i])):
                matrix[i][j] = self.matr1_line[i][j] + self.matr2_line[i][j] # не противоречит условию, т.к. размеры матрицы должны быть одинаковыми
        result_matrix = str('\n'.join(['\t'.join([str(j) for j in i]) for i in matrix])) # конструкцию подсмотрел в интернете по работе с матрицами, \t - горизнотальная табуляция

        return result_matrix

    def __str__(self):
        str_martix = str('\n'.join(['\t'.join([str(j) for j in i]) for i in matrix]))

        return str_martix

# Для проверки ввожу данные матриц 1 и 2 просто в int, числами без внешнего ввода
dummy_matrix1 = [[7, -2, 23], [100, 30, -45], [0, 20, 43]]
dummy_matrix2 = [[-100, 32, 34], [34, 53, 12], [33, 4, 34]]

# Создаем экземпляр класса
my_matrix = Matrix(dummy_matrix1, dummy_matrix2)

# Выводим результат
print(f'Результирующая матрица: \n-----------------\n{my_matrix.__add__()} \n------------------')